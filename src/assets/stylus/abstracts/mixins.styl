/**
* Returns the same value for
* width and height
* @since 1.0.0
* @param { unit } val - The size's value
*
* @example 
*  .selector
*    _square(100%)
*
* yelds: 
*  .selector {
*    width: 100%;
*    height: 100%;
*  }
*/
_square(val)
  width: val
  height: @width

/**
* Render a shadow around a container
* @since 1.0.0
* @param { number } [$a = 1] - The multiply 
* factor for shadows. 
*/
_default-shadow($a = 1)
  box-shadow: 0 3px ($a * 1px) ($a * -2px) rgba(0,0,0, .2), 0 2px ($a * 2px) 0 rgba(0,0,0, .14), 0 1px ($a * 5px) 0 rgba(0,0,0, .12)

/**
* A simple animation using arguments
* @since 1.0.0
* @param { string } arguments - The property 
* that should be animated with the animation's time.
*
* @example _simple-animation(width 300ms)
*/
_simple-animation()
  transition: arguments
  transition-timing-function: cubic-bezier(.7, 0, .3, 1)

_animation()
  transform: translate3d(arguments)
  transition: transform var(--animation__speed, .5s)
  transition-timing-function: cubic-bezier(.7, 0, .3, 1)

// FLEX GRID
_row()
  $comp = grid-row
  display: flex
  flex-flow: _var($comp, flex-direction, row) _var($comp, flex-wrap, wrap) 
  gap: _var($comp, row-gap, 2rem) _var($comp, column-gap, .5rem)
  _var($comp, justify-content, space-between, true)
  _var($comp, align-items, stretch, true)
  _var($comp, width, 100%, true)
  _var($comp, max-width, var(--layout__max-width, 144rem), true)
  _var($comp, margin, 0 auto, true)


_columns()
  //Loop for columns--1 to columns--12
  for num in 1..12
    .column--{num}
      if num is 12
        width: unquote('calc(' + num + '/ 12 * 100%)')
      else
        width: unquote('calc(' + num + '/ 12 * 100% - var(--lz-grid-row__column-gap, .5rem))')

  //column--1 alias
  .column
    width: calc(1 / 12 * 100%)
